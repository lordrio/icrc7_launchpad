type Account = record { owner : principal; subaccount : opt blob };
type ApprovalInfo = record {
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  expires_at : opt nat64;
  spender : Account;
};
type ApproveCollectionArg = record { approval_info : ApprovalInfo };
type ApproveCollectionError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  InvalidSpender;
  CreatedInFuture : record { ledger_time : nat64 };
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type ApproveTokenArg = record { token_id : nat; approval_info : ApprovalInfo };
type ApproveTokenError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  InvalidSpender;
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type ArchivedTransactionResponse = record {
  args : vec TransactionRange;
  callback : func (vec QueryBlock) -> (GetTransactionsResult) query;
};
type BTreeMap = vec record {
  text;
  variant {
    Int : int;
    Map : BTreeMap;
    Nat : nat;
    Nat64 : nat64;
    Blob : blob;
    Text : text;
    Array : vec Value;
  };
};
type Block = variant {
  Int : int;
  Map : BTreeMap;
  Nat : nat;
  Nat64 : nat64;
  Blob : blob;
  Text : text;
  Array : vec Value;
};
type BlockType = record { url : text; block_type : text };
type BurnArg = record {
  token_id : nat;
  memo : opt blob;
  from_subaccount : opt blob;
};
type BurnError = variant {
  GenericError : record { message : text; error_code : nat };
  NonExistingTokenId;
  Unauthorized;
  GenericBatchError : record { message : text; error_code : nat };
};
type DataCertificate = record { certificate : opt blob; hash_tree : blob };
type GetArchiveArgs = record { from : opt principal };
type GetArchivesResultItem = record {
  end : nat;
  canister_id : principal;
  start : nat;
};
type GetBlocksResult = record {
  log_length : nat;
  blocks : vec QueryBlock;
  archived_blocks : vec ArchivedTransactionResponse;
};
type GetTransactionsResult = record {
  log_length : nat;
  blocks : Vec;
  archived_blocks : blob;
};
type IndexType = variant { Stable; StableTyped; Managed };
type InitApprovalsArg = record {
  max_approvals : opt nat16;
  max_approvals_per_token_or_collection : opt nat16;
  settle_to_approvals : opt nat16;
  max_revoke_approvals : opt nat16;
  collection_approval_requires_token : opt bool;
};
type InitArchiveArg = record {
  maxRecordsToArchive : nat;
  archiveIndexType : IndexType;
  maxArchivePages : nat;
  settleToRecords : nat;
  archiveCycles : nat;
  maxActiveRecords : nat;
  maxRecordsInArchiveInstance : nat;
  archiveControllers : opt opt vec principal;
};
type InitArg = record {
  icrc7_supply_cap : opt nat;
  icrc7_description : opt text;
  tx_window : opt nat64;
  minting_account : opt Account;
  icrc7_max_query_batch_size : opt nat16;
  permitted_drift : opt nat64;
  archive_init : opt InitArchiveArg;
  icrc7_max_take_value : opt nat;
  icrc7_max_memo_size : opt nat32;
  icrc7_symbol : text;
  icrc7_max_update_batch_size : opt nat16;
  icrc7_atomic_batch_transfers : opt bool;
  approval_init : opt InitApprovalsArg;
  icrc7_default_take_value : opt nat;
  icrc7_logo : opt text;
  icrc7_name : text;
};
type IsApprovedArg = record {
  token_id : nat;
  from_subaccount : opt blob;
  spender : Account;
};
type MintArg = record {
  to : Account;
  token_id : nat;
  memo : opt blob;
  from_subaccount : opt blob;
  token_description : opt text;
  token_logo : opt text;
  token_name : opt text;
};
type MintError = variant {
  GenericError : record { message : text; error_code : nat };
  SupplyCapReached;
  TokenIdMinimumLimit;
  Unauthorized;
  GenericBatchError : record { message : text; error_code : nat };
  TokenIdAlreadyExist;
};
type QueryBlock = record { id : nat; block : Value };
type Result = variant { Ok : nat; Err : BurnError };
type Result_1 = variant { Ok : nat; Err : ApproveCollectionError };
type Result_2 = variant { Ok : nat; Err : ApproveTokenError };
type Result_3 = variant { Ok : nat; Err : RevokeCollectionApprovalError };
type Result_4 = variant { Ok : nat; Err : RevokeTokenApprovalError };
type Result_5 = variant { Ok : nat; Err : TransferFromError };
type Result_6 = variant { Ok : nat; Err : TransferError };
type Result_7 = variant { Ok : nat; Err : MintError };
type RevokeCollectionApprovalArg = record {
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  spender : opt Account;
};
type RevokeCollectionApprovalError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  ApprovalDoesNotExist;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type RevokeTokenApprovalArg = record {
  token_id : nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  spender : opt Account;
};
type RevokeTokenApprovalError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  ApprovalDoesNotExist;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type Standard = record { url : text; name : text };
type Tip = record {
  last_block_index : blob;
  hash_tree : blob;
  last_block_hash : blob;
};
type TokenApproval = record { token_id : nat; approval_info : ApprovalInfo };
type Transaction = record {
  op : text;
  to : opt Account;
  ts : nat64;
  exp : opt nat64;
  tid : nat;
  from : opt Account;
  memo : opt blob;
  meta : opt vec record { text; Block };
  block : opt Block;
  spender : opt Account;
};
type TransactionRange = record { start : nat; length : nat };
type TransferArg = record {
  to : Account;
  token_id : nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type TransferFromArg = record {
  to : Account;
  spender_subaccount : opt blob;
  token_id : nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type Value = variant {
  Int : int;
  Map : BTreeMap;
  Nat : nat;
  Nat64 : nat64;
  Blob : blob;
  Text : text;
  Array : vec Value;
};
type Vec = vec record {
  args : vec record { start : nat; length : nat };
  callback : func (
      vec record {
        id : nat;
        block : variant {
          Int : int;
          Map : BTreeMap;
          Nat : nat;
          Nat64 : nat64;
          Blob : blob;
          Text : text;
          Array : vec Value;
        };
      },
    ) -> (
      record { log_length : nat; blocks : Vec; archived_blocks : blob },
    ) query;
};
type WalletReceiveResult = record { accepted : nat64 };
service : (InitArg) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  archive_log_canister : () -> (opt principal) query;
  burn : (vec BurnArg) -> (vec opt Result);
  get_tip : () -> (Tip) query;
  icrc37_approve_collection : (vec ApproveCollectionArg) -> (vec opt Result_1);
  icrc37_approve_tokens : (vec ApproveTokenArg) -> (vec opt Result_2);
  icrc37_get_collection_approvals : (Account, opt ApprovalInfo, opt nat) -> (
      vec ApprovalInfo,
    ) query;
  icrc37_get_token_approvals : (nat, opt TokenApproval, opt nat) -> (
      vec TokenApproval,
    ) query;
  icrc37_is_approved : (vec IsApprovedArg) -> (vec bool) query;
  icrc37_max_approvals_per_token_or_collection : () -> (opt nat) query;
  icrc37_max_revoke_approvals : () -> (opt nat) query;
  icrc37_metadata : () -> (vec record { text; Value }) query;
  icrc37_revoke_collection_approvals : (vec RevokeCollectionApprovalArg) -> (
      vec opt Result_3,
    );
  icrc37_revoke_token_approvals : (vec RevokeTokenApprovalArg) -> (
      vec opt Result_4,
    );
  icrc37_transfer_from : (vec TransferFromArg) -> (vec opt Result_5);
  icrc3_get_archives : (GetArchiveArgs) -> (vec GetArchivesResultItem) query;
  icrc3_get_blocks : (vec TransactionRange) -> (GetBlocksResult) query;
  icrc3_get_tip_certificate : () -> (opt DataCertificate) query;
  icrc3_supported_block_types : () -> (vec BlockType) query;
  icrc7_atomic_batch_transfers : () -> (opt bool) query;
  icrc7_balance_of : (vec Account) -> (vec nat) query;
  icrc7_default_take_value : () -> (opt nat) query;
  icrc7_description : () -> (opt text) query;
  icrc7_logo : () -> (opt text) query;
  icrc7_max_memo_size : () -> (opt nat32) query;
  icrc7_max_query_batch_size : () -> (opt nat16) query;
  icrc7_max_take_value : () -> (opt nat) query;
  icrc7_max_update_batch_size : () -> (opt nat16) query;
  icrc7_name : () -> (text) query;
  icrc7_owner_of : (vec nat) -> (vec opt Account) query;
  icrc7_supply_cap : () -> (opt nat) query;
  icrc7_supported_standards : () -> (vec Standard) query;
  icrc7_symbol : () -> (text) query;
  icrc7_token_metadata : (vec nat) -> (
      vec opt vec record { text; Value },
    ) query;
  icrc7_tokens : (opt nat, opt nat) -> (vec nat) query;
  icrc7_tokens_of : (Account, opt nat, opt nat) -> (vec nat) query;
  icrc7_total_supply : () -> (nat) query;
  icrc7_transfer : (vec TransferArg) -> (vec opt Result_6);
  mint : (MintArg) -> (Result_7);
  minting_authority : () -> (opt Account) query;
  set_minting_authority : (Account) -> (bool);
  txn_logs : (nat32, nat32) -> (vec Transaction) query;
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (WalletReceiveResult);
}